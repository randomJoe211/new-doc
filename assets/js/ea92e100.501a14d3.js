"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9511],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>u});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=r.createContext({}),d=function(e){var a=r.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=d(e.components);return r.createElement(l.Provider,{value:a},e.children)},h={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},c=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(t),u=n,m=c["".concat(l,".").concat(u)]||c[u]||h[u]||s;return t?r.createElement(m,o(o({ref:a},p),{},{components:t})):r.createElement(m,o({ref:a},p))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=t.length,o=new Array(s);o[0]=c;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var d=2;d<s;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8571:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var r=t(7462),n=(t(7294),t(3905));const s={},o="Related technologies",i={unversionedId:"introduction/related-tech",id:"version-1.1.0/introduction/related-tech",title:"Related technologies",description:"This topic introduces databases and graph-related technologies that are closely related to distributed graph databases.",source:"@site/versioned_docs/version-1.1.0/2.introduction/3.related-tech.md",sourceDirName:"2.introduction",slug:"/introduction/related-tech",permalink:"/docs/introduction/related-tech",draft:!1,editUrl:"https://github.com/randomJoe211/randomjoe211.github.io/edit/main/versioned_docs/version-1.1.0/2.introduction/3.related-tech.md",tags:[],version:"1.1.0",sidebarPosition:3,frontMatter:{},sidebar:"docs",previous:{title:"Market overview of graph databases",permalink:"/docs/introduction/graph-database"},next:{title:"What is Nebula Graph",permalink:"/docs/introduction/what-is-nebula-graph"}},l={},d=[{value:"Databases",id:"databases",level:2},{value:"Relational databases",id:"relational-databases",level:3},{value:"Relationships in relational databases",id:"relationships-in-relational-databases",level:4},{value:"Origins of relational databases",id:"origins-of-relational-databases",level:4},{value:"NoSQL databases",id:"nosql-databases",level:3},{value:"Key-value Data Store",id:"key-value-data-store",level:4},{value:"Columnar Store",id:"columnar-store",level:4},{value:"Document Store",id:"document-store",level:4},{value:"Graph Store",id:"graph-store",level:4},{value:"Graph-related technologies",id:"graph-related-technologies",level:2},{value:"Graph language",id:"graph-language",level:3},{value:"Graph database and graph processing systems",id:"graph-database-and-graph-processing-systems",level:3},{value:"Graph sharding methods",id:"graph-sharding-methods",level:3},{value:"Technical challenges",id:"technical-challenges",level:3},{value:"Open-source graph tools on single machines",id:"open-source-graph-tools-on-single-machines",level:3},{value:"Industry databases and benchmarks",id:"industry-databases-and-benchmarks",level:3},{value:"LDBC",id:"ldbc",level:4},{value:"Trends",id:"trends",level:2},{value:"Graph technologies of different origins and goals are learning from and integrating with each other",id:"graph-technologies-of-different-origins-and-goals-are-learning-from-and-integrating-with-each-other",level:3},{value:"The trends in cloud computing place higher demands on scalability.",id:"the-trends-in-cloud-computing-place-higher-demands-on-scalability",level:3},{value:"Trends in hardware that SSD will be the mainstream persistent device",id:"trends-in-hardware-that-ssd-will-be-the-mainstream-persistent-device",level:3}],p={toc:d};function h(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"related-technologies"},"Related technologies"),(0,n.kt)("p",null,"This topic introduces databases and graph-related technologies that are closely related to distributed graph databases."),(0,n.kt)("h2",{id:"databases"},"Databases"),(0,n.kt)("h3",{id:"relational-databases"},"Relational databases"),(0,n.kt)("p",null,"A relational database is a database that uses a relational model to organize data. The relational model is a two-dimensional table model, and a relational database consists of two-dimensional tables and the relationships between them. When it comes to relational databases, most people think of MySQL, one of the most popular database management systems that support database operations using the most common structured query language (SQL) and stores data in the form of tables, rows, and columns. This approach to storing data is derived from the relational data model proposed by Edgar Frank Codd in 1970."),(0,n.kt)("p",null,"In a relational database, a table can be created for each type of data to be stored. For example, the player table is used to store all player information, the team table is used to store team information. Each row of data in a SQL table must contain a primary key. The primary key is a unique identifier for the row of data. Generally, the primary key is self-incrementing with the number of rows as the field ID. Relational databases have served the computer industry very well since their inception and will continue to do so for a long time to come."),(0,n.kt)("p",null,"If you have used Excel, WPS, or other similar applications, you have a rough idea of how relational databases work. First, you set up the columns, then you add rows of data under the corresponding columns. You can average or otherwise aggregate the data in a column, similar to averaging in a relational database MySQL. Pivot tables in Excel are the equivalent of querying data in a relational database MySQL using aggregation functions and CASE statements. An Excel file can have multiple tables, and a single table is equivalent to a single table in MySQL. An Excel file is similar to a MySQL database."),(0,n.kt)("h4",{id:"relationships-in-relational-databases"},"Relationships in relational databases"),(0,n.kt)("p",null,"Unlike graph databases, edges in relational databases (or SQL-type databases) are also stored as entities in specialized edge tables. Two tables are created, player and team, and then player_team is created as an edge table. Edge tables are usually formed by joining related tables. For example, here the edge table player_team is made by joining the player table and the team table."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/42762957/91702816-dc872200-ebab-11ea-8b36-577c29a3fe7a.png",alt:"image"})),(0,n.kt)("p",null,"The way of storing edges is not a big problem when associating small data sets, but problems arise when there are too many relationships in a relational database. Specifically, when you want to query just one player's teammates, you have to join all the data in the table and then filter out all the data you don't need, which puts a huge strain on the relational database when your dataset reaches a certain size. If you want to associate multiple different tables, the system may not be able to respond before the join bombs."),(0,n.kt)("h4",{id:"origins-of-relational-databases"},"Origins of relational databases"),(0,n.kt)("p",null,"As mentioned above, the relational data model was first proposed by Edgar Frank Codd, an IBM engineer, in 1970. Codd wrote several papers on database management systems that addressed the potential of the relational data model. The relational data model does not rely on linked lists of data (mesh or hierarchical data), but more on data sets. Using the mathematical method of tuple calculus, he argued that these datasets can perform the same tasks as a navigational database. The only requirement was that the relational data model needed a suitable query language to guarantee the consistency requirements of the database. This became the inspiration for declarative query languages such as Structured Query Language (SQL). IBM's System R was one of the first implementations of such a system. But Software Development Laboratories, a small company founded by ex-IBM people and one illustrious Mr.Larry Ellison, beat IBM to the market with the product that would become known as Oracle."),(0,n.kt)("p",null,"Since the relational database was a trendy term at the time, many database vendors preferred to use it in their product names, even though their products were not actually relational. To prevent this and reduce the misuse of the relational data model, Codd introduced the famous Codd's 12 Rules. All relational data systems must follow Codd's 12 Rules."),(0,n.kt)("h3",{id:"nosql-databases"},"NoSQL databases"),(0,n.kt)("p",null,'Graph databases are not the only alternative that can overcome the shortcomings of relational databases. There are many non-relational database products on the market that can be called NoSQL. The term NoSQL was first introduced in the late 1990s and can be interpreted as "not SQL" or "not only SQL". For the sake of understanding, NoSQL can be interpreted as a "non-relational database" here. Unlike relational databases, the data storage and retrieval mechanisms provided by NoSQL databases are not modeled based on table relationships. NoSQL databases can be divided into four categories.'),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Key-value Data Store"),(0,n.kt)("li",{parentName:"ul"},"Columnar Store"),(0,n.kt)("li",{parentName:"ul"},"Document Store"),(0,n.kt)("li",{parentName:"ul"},"Graph Store")),(0,n.kt)("p",null,"The following describes the four types of NoSQL databases."),(0,n.kt)("h4",{id:"key-value-data-store"},"Key-value Data Store"),(0,n.kt)("p",null,"Key-value databases store data in unique key-value pairs. Unlike relational databases, key-value stores do not have tables and columns. A key-value database itself is like a large table with many columns (i.e., keys). In a key-value store database, data are stored and queried by means of keys, usually implemented as hash lists. This is much simpler than traditional SQL databases, and for some web applications, it is sufficient."),(0,n.kt)("p",null,"The advantage of the key-value model for IT systems is that it is simple and easy to deploy. In most cases, this type of storage works well for unrelated data. If you are just storing data without querying it, there is no problem using this storage method. However, if the DBA only queries or updates some of the values, the key-value model becomes inefficient. Common key-value storage databases include Redis, Voldemort, and Oracle BDB."),(0,n.kt)("h4",{id:"columnar-store"},"Columnar Store"),(0,n.kt)("p",null,"A NoSQL database's columnar store has many similarities to a NoSQL database's key-value store because the columnar store is still using keys for storage and retrieval. The difference is that in a columnar store database, the column is the smallest storage unit, and each column consists of a key, a value, and a timestamp for version control and conflict resolution. This is particularly useful when scaling in a distributed manner, as timestamps can be used to locate expired data when the database is updated. Because of the good scalability of columnar storage, the columnar store is suitable for very large data sets. Common columnar storage databases include HBase, Cassandra, HadoopDB, etc."),(0,n.kt)("h4",{id:"document-store"},"Document Store"),(0,n.kt)("p",null,"A NoSQL database document store is a key-value-based database, but with enhanced functionality. Data is still stored as keys, but the values in a document store are structured documents, not just a string or a single value. That is, because of the increased information structure, document stores are able to perform more optimized queries and make data retrieval easier. Therefore, document stores are particularly well suited for storing, indexing, and managing document-oriented data or similar semi-structured data."),(0,n.kt)("p",null,"Technically speaking, as a semi-structured unit of information, a document in a document store can be any form of document available, including XML, JSON, YAML, etc., depending on the design of the database vendor. For example, JSON is a common choice. While JSON is not the best choice for structured data, JSON-type data can be used in both front-end and back-end applications. Common document storage databases include MongoDB, CouchDB, Terrastore, etc."),(0,n.kt)("h4",{id:"graph-store"},"Graph Store"),(0,n.kt)("p",null,"The last class of NoSQL databases is graph databases. Nebula Graph, is also a graph database. Although graph databases are also NoSQL databases, graph databases are fundamentally different from the above-mentioned NoSQL databases. Graph databases store data in the form of vertices, edges, and properties. Its advantages include high flexibility, support for complex graph algorithms, and can be used to build complex relational graphs. We will discuss graph databases in detail in the subsequent topics. But in this topic, you just need to know that a graph database is a NoSQL type of database. Common graph databases include Nebula Graph, Neo4j, OrientDB, etc."),(0,n.kt)("h2",{id:"graph-related-technologies"},"Graph-related technologies"),(0,n.kt)("p",null,"Take a look at a panoramic view of graph technology in 2020 ",(0,n.kt)("sup",{parentName:"p",id:"fnref-lan"},(0,n.kt)("a",{parentName:"sup",href:"#fn-lan",className:"footnote-ref"},"lan")),"."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/figures/GraphTechnologyLandscape.jpg",alt:"Image"})),(0,n.kt)("p",null,"There are many technologies that are related to graphs, which can be broadly classified into these categories:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Infrastructure: Graph databases, graph computing (processing) engines, graph deep learning, cloud services, etc.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Applications: Visualization, knowledge graph, anti-fraud, cyber security, social network, etc."))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Development tools: Graph query languages, modeling tools, development frameworks, and libraries.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"E-books ",(0,n.kt)("sup",{parentName:"p",id:"fnref-info"},(0,n.kt)("a",{parentName:"sup",href:"#fn-info",className:"footnote-ref"},"info"))," and conferences, etc."))),(0,n.kt)("h3",{id:"graph-language"},"Graph language"),(0,n.kt)("p",null,"In the previous topic, we introduced the history of graph languages. In this section, we make a classification of the functions of graph languages."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Nearest neighbor query (NNS): Query the neighboring edges, neighbors, or K-hops neighbors.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Find one/all subgraphs that satisfy a given graph pattern. This problem is very close to Subgraph Isomorphism - two seemingly different graphs that are actually identical ",(0,n.kt)("sup",{parentName:"p",id:"fnref-subiso"},(0,n.kt)("a",{parentName:"sup",href:"#fn-subiso",className:"footnote-ref"},"subiso"))," as shown below."))),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/samegraph.png",alt:null})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Reachability (connectivity) problems: The most common reachability problem is the shortest path problem. Such problems are usually described in terms of Regular Path Query - a series of connected groups of vertices forming a path that needs to satisfy some regular expression.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Analytic problems: It is related to some convergent operators, such as Average, Count, Max, Vertex Degree. Measures the distance between all two vertices, the degree of interaction between a vertex and other vertices."))),(0,n.kt)("h3",{id:"graph-database-and-graph-processing-systems"},"Graph database and graph processing systems"),(0,n.kt)("p",null,"A graph system usually includes a complex data pipeline ",(0,n.kt)("sup",{parentName:"p",id:"fnref-biggraph"},(0,n.kt)("a",{parentName:"sup",href:"#fn-biggraph",className:"footnote-ref"},"biggraph")),". From the data source (the left side of the picture below) to the processing output (the right side), multiple data processing steps and systems are used, such as the ETL module, Graph OLTP module, OLAP module, BI, and knowledge graph. "),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/graphpipe.png",alt:null})),(0,n.kt)("p",null,"Graph databases and graph processing systems have different origins and specialties (and weaknesses)."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"(Online) The graph database is designed for persistent storage management of graphs and efficient subgraph operations. Hard disks and network are the target operating devices, physical/logical data mapping, data integrity, and (fault) consistency are the main goals. Each request typically involves only a small part of the full graph and can usually be done on a single server. Request latency is usually in milliseconds or seconds, and request concurrency is typically in the thousands or hundreds of thousands. The early Neo4j was one of the origins of the graph database space.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"(Offline) The graph processing system is for high-volume, concurrency, iteration, processing, and analysis of the full graph. Memory and network are the target operating devices. Each request involves all graph vertices and requires all servers to be involved in its completion. The latency of a single request is in the range of minutes to hours (days). The request concurrency is in single digits. Google's Pregel ",(0,n.kt)("sup",{parentName:"p",id:"fnref-pregel"},(0,n.kt)("a",{parentName:"sup",href:"#fn-pregel",className:"footnote-ref"},"Pregel"))," represents the typical origin of graph processing systems. Its point-centric programming abstraction and BSP's operational model constitute a programming paradigm that is a more graph-friendly API abstraction than the previous Hadoop Map-Reduce."))),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/databaseandprocess.png",alt:null}),"\n",(0,n.kt)("sup",{parentName:"p",id:"fnref-iga"},(0,n.kt)("a",{parentName:"sup",href:"#fn-iga",className:"footnote-ref"},"iga"))),(0,n.kt)("h3",{id:"graph-sharding-methods"},"Graph sharding methods"),(0,n.kt)("p",null,"For large-scale graph data, it is difficult to store it in the memory of a single server, and even just storing the graph structure itself is not enough. By increasing the capacity of a single server, its cost price usually rises exponentially."),(0,n.kt)("p",null,"As the volume of data increases, for example, 100 billion data already exceeds the capacity of all commercially available servers on the market."),(0,n.kt)("p",null,"Another option is to shard data and place each shard on a different server to increase reliability and performance. For NoSQL systems, such as key-value or document systems, the sharding method is intuitive and natural. Each record and data unit can usually be placed on a different server based on the key or docID."),(0,n.kt)("p",null,'However, the sharding of data structures like graphs is usually less intuitive, because usually, graphs are "fully connected" and each vertex can be connected to any other vertex in usually 6 hops.'),(0,n.kt)("p",null,"And it has been theoretically proven that the graph sharding problem is NP."),(0,n.kt)("p",null,"When distributing the entire graph data across multiple servers, the cross-server network access latency is 10 times higher than the hardware (memory) access time inside the same server. Therefore, for some depth-first traversal scenarios, a large number of cross-network accesses occur, resulting in extremely high overall latency."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/lessrpc.png",alt:null}),(0,n.kt)("sup",{parentName:"p",id:"fnref-gpml"},(0,n.kt)("a",{parentName:"sup",href:"#fn-gpml",className:"footnote-ref"},"gpml"))),(0,n.kt)("p",null,"Usually, graphs have a clear power-law distribution. A small number of vertices have much denser neighboring edges than the average vertices. Though processing these vertices can usually be within the same server which reduces cross-network access, load will be far more heavier than the average."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/Power_Law_Distribution.png",alt:null})),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/singleserver.png",alt:null})),(0,n.kt)("p",null,"The common graph sharding methods are as follows:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Application-level sharding: The application layer senses and controls which shard each vertex and edge should locate on based on the type of vertices and edges. A set of vertices of the same type is placed on one sharding and another set of vertices of the same type is placed on another sharding. Of course, for high reliability, the sharding itself can also be made multiple replicas. When used by the application, the desired vertices and edges are fetched from each shard, and then on the off-application side (or some proxy server-side), the fetched data is assembled into the final result. This is typically represented by the Neo4j 4. x Fabric.")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/neo4j4x.png",alt:null})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Using a distributed cache layer: Add a memory cache layer on the top of the hard disk and cache important portions of the sharding and data and preheat that cache.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Adding read-only replicas or views: Add read-only replicas or create a view for some of the graph sharding, and pass the heavier load of read requests through these sharding servers.  ")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Performing fine-grained graph sharding: Form multiple small partitions of vertices and edges instead of one large sharding, and then place the more correlated partitions on the same server as much as possible. ",(0,n.kt)("sup",{parentName:"p",id:"fnref-arr"},(0,n.kt)("a",{parentName:"sup",href:"#fn-arr",className:"footnote-ref"},"arr")),"\u3002 "))),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/smartgraph.png",alt:null})),(0,n.kt)("p",null,"A mixture of these approaches is also used in specific engineering practices. Usually, offline graph processing systems perform some degree of graph preprocessing to improve the locality through an ETL process, while online graph database systems usually choose a periodic data rebalancing process to improve data locality. "),(0,n.kt)("h3",{id:"technical-challenges"},"Technical challenges"),(0,n.kt)("p",null,"In the literature ",(0,n.kt)("sup",{parentName:"p",id:"fnref-ubiquity"},(0,n.kt)("a",{parentName:"sup",href:"#fn-ubiquity",className:"footnote-ref"},"Ubiquity")),", a thorough investigation of graphs and challenges is done, and the following lists the top ten graph technology challenges."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Scalability: Loading and upgrading big graphs, performing graph computation and graph traversal, use of triggers and supernodes"),(0,n.kt)("li",{parentName:"ul"},"Visualization: Customizable layouts, rendering and display big images, and display dynamic and updated display"),(0,n.kt)("li",{parentName:"ul"},"Query language and programming API: Language expressiveness, standards compatibility, compatibility with existing systems, design of subqueries, and associative queries across multiple graphs"),(0,n.kt)("li",{parentName:"ul"},"Faster graph algorithms"),(0,n.kt)("li",{parentName:"ul"},"Easy to use (configuration and usage)"),(0,n.kt)("li",{parentName:"ul"},"Performance metrics and testing"),(0,n.kt)("li",{parentName:"ul"},"General graph technology software (e.g., to handle offline, online, streaming computations.\uff09"),(0,n.kt)("li",{parentName:"ul"},"ETL"),(0,n.kt)("li",{parentName:"ul"},"Debug and test")),(0,n.kt)("h3",{id:"open-source-graph-tools-on-single-machines"},"Open-source graph tools on single machines"),(0,n.kt)("p",null,"There is a common misconception about graph databases that any data access involving graph structure needs to be stored in a graph database. "),(0,n.kt)("p",null,"When the amount of data is not large, single machine memory is enough to store the data. You can use some single-machine open-source tools to store tens of millions of vertices and edges."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"JGraphT",(0,n.kt)("sup",{parentName:"li",id:"fnref-jgrapht"},(0,n.kt)("a",{parentName:"sup",href:"#fn-jgrapht",className:"footnote-ref"},"JGraphT")),": A well-known open-source Java graph theory library, which implements a considerable number of efficient graph algorithms.")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"igraph",(0,n.kt)("sup",{parentName:"li",id:"fnref-igraph"},(0,n.kt)("a",{parentName:"sup",href:"#fn-igraph",className:"footnote-ref"},"igraph")),": A lightweight and powerful library, supporting R, Python, and C++.")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"NetworkX",(0,n.kt)("sup",{parentName:"li",id:"fnref-networkx"},(0,n.kt)("a",{parentName:"sup",href:"#fn-networkx",className:"footnote-ref"},"NetworkX")),": The first choice for data scientists doing graph theory analysis.")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Cytoscape",(0,n.kt)("sup",{parentName:"li",id:"fnref-cytoscape"},(0,n.kt)("a",{parentName:"sup",href:"#fn-cytoscape",className:"footnote-ref"},"Cytoscape")),": A powerful visual open-source graph analysis tool.")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Gephi",(0,n.kt)("sup",{parentName:"li",id:"fnref-gephi"},(0,n.kt)("a",{parentName:"sup",href:"#fn-gephi",className:"footnote-ref"},"Gephi")),": A powerful visual open-source graph analysis tool.")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"arrows.app",(0,n.kt)("sup",{parentName:"li",id:"fnref-arrow"},(0,n.kt)("a",{parentName:"sup",href:"#fn-arrow",className:"footnote-ref"},"Arrow")),": A simple brain mapping tool for visually generating Cypher statements.")),(0,n.kt)("h3",{id:"industry-databases-and-benchmarks"},"Industry databases and benchmarks"),(0,n.kt)("h4",{id:"ldbc"},"LDBC"),(0,n.kt)("p",null,"LDBC",(0,n.kt)("sup",{parentName:"p",id:"fnref-ldbc"},(0,n.kt)("a",{parentName:"sup",href:"#fn-ldbc",className:"footnote-ref"},"LDBC"))," (Linked Data Benchmark Council\uff09is a non-profit organization composed of hardware and software giants such as Oracle, Intel and mainstream graph database vendors such as Neo4j and TigerGraph, which is the benchmark guide developer and test result publisher for graphs and has a high influence in the industry."),(0,n.kt)("p",null,"SNB (Social Network Benchmark\uff09is one of the benchmarks developed by the Linked Data Benchmark Committee (LDBC) for graph databases and is divided into two scenarios: interactive query (Interactive) and business intelligence (BI). Its role is similar to that of TPC-C, TPC-H, and other tests in SQL-type databases, which can help users compare the functions, performance, and capacity of various graph database products."),(0,n.kt)("p",null,"An SNB dataset simulates the relationship between people and posts of a social network, taking into account the distribution properties of the social network, the activity of people, and other social information."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/ldbc.png",alt:null})),(0,n.kt)("p",null,"The standard data size ranges from 0.1 GB (scale factor 0.1) to 1000 GB (sf 1000). Larger data sets of 10 TB and 100 TB can also be generated. The number of vertices and edges is as shown below."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/ldbcsf.png",alt:"data_size"})),(0,n.kt)("h2",{id:"trends"},"Trends"),(0,n.kt)("h3",{id:"graph-technologies-of-different-origins-and-goals-are-learning-from-and-integrating-with-each-other"},"Graph technologies of different origins and goals are learning from and integrating with each other"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/convergenceofcapability.png",alt:null})),(0,n.kt)("h3",{id:"the-trends-in-cloud-computing-place-higher-demands-on-scalability"},"The trends in cloud computing place higher demands on scalability."),(0,n.kt)("p",null,"According to Gartner's projections, cloud services have been growing at a rapid rate and penetration ",(0,n.kt)("sup",{parentName:"p",id:"fnref-cl"},(0,n.kt)("a",{parentName:"sup",href:"#fn-cl",className:"footnote-ref"},"cl")),". A large number of commercial software is gradually moving from a completely local and private model 10 years ago to a cloud services-based business model.\nOne of the major advantages of cloud services is that they offer near-infinite scalability. It requires that various cloud infrastructure-based software must have a better ability to scale quickly and elastically. "),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/cloudtrends.png",alt:null})),(0,n.kt)("h3",{id:"trends-in-hardware-that-ssd-will-be-the-mainstream-persistent-device"},"Trends in hardware that SSD will be the mainstream persistent device"),(0,n.kt)("p",null,'Hardware determines software architecture. From the 1950s, when Moore\'s Law was discovered, to the 00s, when multi-core was introduced, hardware trends and speeds have profoundly determined software architecture. Database systems are mostly designed around "hard disk + memory", high-performance computing systems are mostly designed around "memory + CPU", and distributed systems are designed completely differently for 1 gigabit, 10 gigabits, and RDMA.'),(0,n.kt)("p",null,"Graph traversals are featured as random access. Early graph database systems adopted the large memory + HDD architecture. By designing some data structure in memory, random access can be achieved in memory (B+ trees, Hash tables) for the purpose of optimizing graph topology traversal. And then the random access was converted into sequential reads and writes suitable for HDDs. The entire software architecture (including the storage and compute layers) must be based on and built around such IO processes. With the decline in SSD prices ",(0,n.kt)("sup",{parentName:"p",id:"fnref-ssdhdd"},(0,n.kt)("a",{parentName:"sup",href:"#fn-ssdhdd",className:"footnote-ref"},"ssdhdd")),", SSDs are replacing HDDs as the dominant device. Friendly random access, deep IO queue, fast access are the features of SSD that differ from HDD's highly repetitive sequence, random latency, and easily damaged disk. The redesign for all software architectures becomes a heavy historical technical burden."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs-cdn.nebula-graph.com.cn/books/images/ssdhdd.png",alt:null})),(0,n.kt)("div",{className:"footnotes"},(0,n.kt)("hr",{parentName:"div"}),(0,n.kt)("ol",{parentName:"div"},(0,n.kt)("li",{parentName:"ol",id:"fn-lan"},(0,n.kt)("a",{parentName:"li",href:"https://graphaware.com/graphaware/2020/02/17/graph-technology-landscape-2020.html"},"https://graphaware.com/graphaware/2020/02/17/graph-technology-landscape-2020.html"),(0,n.kt)("a",{parentName:"li",href:"#fnref-lan",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-info"},"Electronic copies are available for learning purposes by contacting ",(0,n.kt)("a",{parentName:"li",href:"mailto:min.wu@vesoft.com"},"Author"),".",(0,n.kt)("a",{parentName:"li",href:"#fnref-info",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-subiso"},(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Graph_isomorphism"},"https://en.wikipedia.org/wiki/Graph_isomorphism"),(0,n.kt)("a",{parentName:"li",href:"#fnref-subiso",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-biggraph"},"The Future is Big Graphs! A Community View on Graph Processing Systems. ",(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/2012.06171"},"https://arxiv.org/abs/2012.06171"),(0,n.kt)("a",{parentName:"li",href:"#fnref-biggraph",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-pregel"},"G. Malewicz, M. H. Austern, A. J. Bik, J. C. Dehnert, I. Horn, N. Leiser, and G. Czajkowski. Pregel: a system for large-scale graph processing. In Proceedings of the International Conference on Management of data (SIGMOD), pages 135\u2013146, New York, NY, USA, 2010. ACM",(0,n.kt)("a",{parentName:"li",href:"#fnref-pregel",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-iga"},(0,n.kt)("a",{parentName:"li",href:"https://neo4j.com/graphacademy/training-iga-40/02-iga-40-overview-of-graph-algorithms/"},"https://neo4j.com/graphacademy/training-iga-40/02-iga-40-overview-of-graph-algorithms/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-iga",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-gpml"},(0,n.kt)("a",{parentName:"li",href:"https://livebook.manning.com/book/graph-powered-machine-learning/welcome/v-8/"},"https://livebook.manning.com/book/graph-powered-machine-learning/welcome/v-8/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-gpml",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-arr"},(0,n.kt)("a",{parentName:"li",href:"https://www.arangodb.com/learn/graphs/using-smartgraphs-arangodb/"},"https://www.arangodb.com/learn/graphs/using-smartgraphs-arangodb/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-arr",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-ubiquity"},(0,n.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/1709.03188"},"https://arxiv.org/abs/1709.03188"),(0,n.kt)("a",{parentName:"li",href:"#fnref-ubiquity",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-jgrapht"},(0,n.kt)("a",{parentName:"li",href:"https://jgrapht.org/"},"https://jgrapht.org/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-jgrapht",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-igraph"},(0,n.kt)("a",{parentName:"li",href:"https://igraph.org/"},"https://igraph.org/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-igraph",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-networkx"},(0,n.kt)("a",{parentName:"li",href:"https://networkx.org/"},"https://networkx.org/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-networkx",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-cytoscape"},(0,n.kt)("a",{parentName:"li",href:"https://cytoscape.org/"},"https://cytoscape.org/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-cytoscape",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-gephi"},(0,n.kt)("a",{parentName:"li",href:"https://gephi.org/"},"https://gephi.org/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-gephi",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-arrow"},(0,n.kt)("a",{parentName:"li",href:"https://arrows.app/"},"https://arrows.app/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-arrow",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-ldbc"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/ldbc/ldbc_snb_docs"},"https://github.com/ldbc/ldbc_snb_docs"),(0,n.kt)("a",{parentName:"li",href:"#fnref-ldbc",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-cl"},(0,n.kt)("a",{parentName:"li",href:"https://cloudcomputing-news.net/news/2019/apr/15/public-cloud-soaring-to-331b-by-2022-according-to-gartner/"},"https://cloudcomputing-news.net/news/2019/apr/15/public-cloud-soaring-to-331b-by-2022-according-to-gartner/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-cl",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-ssdhdd"},(0,n.kt)("a",{parentName:"li",href:"https://blocksandfiles.com/2021/01/25/wikibon-ssds-vs-hard-drives-wrights-law/"},"https://blocksandfiles.com/2021/01/25/wikibon-ssds-vs-hard-drives-wrights-law/"),(0,n.kt)("a",{parentName:"li",href:"#fnref-ssdhdd",className:"footnote-backref"},"\u21a9")))))}h.isMDXComponent=!0}}]);